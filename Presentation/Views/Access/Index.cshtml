@model List<AccessNode>

<div id="jstree"></div>

<div class="d-flex justify-content-start gap-2 align-items-center">
    <button class="btn btn-secondary mt-3" id="import-button">Import</button>
    <input type="file" accept=".json" id="json-file-input" class="mt-3" multiple />
</div>
<button class="btn btn-primary mt-3" id="export-button">Export</button>

@section Scripts
{
    <script>
        $(document).ready(function () {
            $('#jstree').jstree({
                "core": {
                    "data": @Html.Raw(JsonSerializer.Serialize(Model)),
                    "themes": {
                        "icons": false
                    },
                    "check_callback": true
                },
                "checkbox": {
                    "three_state": false,
                    "cascade": "up"
                },
                "plugins": ["checkbox", "contextmenu"],
                "contextmenu": {
                    "items": function (node) {
                        return {
                            "select_children": {
                                "label": "Select All Children",
                                "action": function () {
                                    selectOrUnselectChildren(node, true);
                                }
                            },
                            "unselect_children": {
                                "label": "Unselect All Children",
                                "action": function () {
                                    selectOrUnselectChildren(node, false);
                                }
                            },
                            "select_children_one_depth": {
                                "label": "Select All Children (One Depth)",
                                "action": function () {
                                    selectOrUnselectChildren(node, true, true);
                                }
                            }
                        };
                    }
                }
            });

            $('#export-button').click(function () {
                var selectedNodes = $('#jstree').jstree("get_selected", true);

                if (selectedNodes.length === 0) {
                    alert("No nodes selected for export.");
                    return;
                }

                var exportData = selectedNodes.map(function (node) {
                    return {
                        id: Number(node.id),
                        text: node.text
                    };
                });

                var jsonData = JSON.stringify(exportData);

                fetch('@Url.Action("Export", "Access")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: jsonData
                })
                    .then(response => response.blob())
                    .then(blob => {
                        var url = window.URL.createObjectURL(blob);
                        var a = document.createElement('a');
                        a.href = url;
                        a.download = 'exported_data.json';
                        document.body.appendChild(a);
                        a.click();
                        a.remove();
                        window.URL.revokeObjectURL(url);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });

            $('#import-button').click(function () {
            var fileInput = document.getElementById('json-file-input');
            if (!fileInput.files.length) {
                alert('Please select one or more JSON files to import.');
                return;
            }

            let files = Array.from(fileInput.files);
            let importPromises = [];

            files.forEach(file => {
                let reader = new FileReader();
                let importPromise = new Promise((resolve, reject) => {
                    reader.onload = function (e) {
                        try {
                            let fileContent = e.target.result;
                            let jsonData = JSON.parse(fileContent);
                            resolve(jsonData);
                        } catch (err) {
                            alert('Invalid JSON file: ' + file.name);
                            reject(err);
                        }
                    };
                    reader.readAsText(file);
                });
                importPromises.push(importPromise);
            });

            Promise.all(importPromises)
                .then(results => {
                    fetch('@Url.Action("Import", "Access")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(results)
                    })
                        .then(response => response.json())
                        .then(data => {
                            alert('All files imported successfully!');
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred during the import.');
                        });
                })
                .catch(error => {
                    alert('An error occurred during the import.');
                });
        });

            function selectOrUnselectChildren(node, select, oneDepth = false) {
                var nodeData = $('#jstree').jstree(true).get_node(node);
                var childNodes = nodeData.children;

                if (childNodes.length) {
                    $.each(childNodes, function (index, child) {
                        if (select) {
                            $('#jstree').jstree('select_node', child);
                        } else {
                            $('#jstree').jstree('deselect_node', child);
                        }
                        if (oneDepth) return false;
                    });
                } else {
                    alert("No children to select/unselect.");
                }
            }
        });
    </script>
}